2022/11/6
 
    有点似懂非懂,总的来说,我理解的商品与货架是这样的关系,生产者与消费者的pv操作自身就存在着一把锁.
生产者生产时,当剩余货架空了,无法再进行p操作减少货架,信号量1号无法再减少,就产生了阻塞,进入睡眠状态.
而此时消费者仍然在跑,所以当此时消费者进行p操作时(此时不可能产生阻塞,只有商品为空时p操作才会产生阻塞)商品会减少一个.
这时锁就体现了作用,消费者没有进行v操作,剩余货架不会增多,生产者就不会被唤醒从而对货架进行操作.
当消费者完成消费,将剩余货架增加1个时,生产者才会被唤醒,而此时消费者已经完成了一轮pv操作.
所以不存在生产者和消费者同时对着空货架进行操作的情况,而在生产者消费者都在跑的情况下(指两个进程都没有睡觉).
不管对信号量0号和信号量1号做出了什么样的操作,进行一个pv周期后,信号量集合不会乱掉.
因为pv操作是操作系统层面的原子操作,商品加一,货架就一定会减一.
有点难得理解,互斥与并发也是似懂非懂的,就先这样吧.

明天开始就开始为期一周的C语言复习,然后把编译器做出来,没有思路就先把题目做一下.

over
